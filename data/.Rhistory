install.packages(c('brms', 'data.table', 'pracma'))
library(brms)
?brm
fit7 <- brm(bf(y ~ x, quantile = 0.25), data = data_het,
family = asym_laplace())
summary(fit7)
conditional_effects(fit7)
data_het <- data.frame(
y = c(rnorm(50), rnorm(50, 1, 2)),
x = factor(rep(c("a", "b"), each = 50))
)
fit7 <- brm(bf(y ~ x, quantile = 0.25), data = data_het,
family = asym_laplace())
summary(fit7)
conditional_effects(fit7)
4+4
install.packages('tidyverse')
update.packages(ask=FALSE)
x <- c(2, 1, -2)
qt
qr
qr(x)
norm
norm(c(2, 1, -2))
update.packages(ask=FALSE)
dat <- data.frame(x = c(0, 1, 1), y = c(3, 3, 6))
res <- lm(y ~ x, data = dat)
res
plot(res)
res
summary(res)
x = matrix(c(.6, .8, .6, .8), nrow=2)
x
t(x)
x = matrix(c(.6, .6, .8, .8), nrow=2)
x
x = matrix(c(.6, .6, .8, .8), ncol=2)
x
x = matrix(c(.6, .8, .6, .8), ncol=2)
x
x = matrix(c(.6, .8, .6, .8), nrow=2)
x
x = matrix(c(.6, .8, .8, .6), nrow=2)
x
t(x)
x*t(x)
t(x) %*% x
x %*% t(x)
x
t(x)
lsq
ls
update.packages(ask=FALSE)
def split(a, n):
k, m = divmod(len(a), n)
return (a[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n))
d <- seq(1, 10)
d
split(d, ceiling(seq_along(d)/5))
split(d, ceiling(seq_along(d)/2))
d
list()
alphanum
d <- c('a', 'b', 'c','d','e','f','g')
d
split(d, ceiling(seq_along(d)/2))
dnorm(c(1,2,3,4), 1, 1, 1)
dnorm(c(1,2,3,4), 1, 2, 1)
dbinom(1, 3, 0.2)
dbinom(1, 3.9, 0.2)
rt
x <- rpois(10000, 3)
hist(x)
install.packages("RSelenium")
driver <- rsDriver(port = 2000L,browser = "firefox")
library(RSelenium)
driver <- rsDriver(port = 2000L,browser = "firefox")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages(c('ggplot2', 'data.table', 'lme4', 'brms', 'pracma'))
install.packages('knidr')
install.packages('knitr')
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
# knit with rmarkdown::render('_ri.Rmd', output_file = '_ri.md.html')
# (need to be in the same directory as this file)
library(ggplot2)
library(data.table)
dat <- fread('./both.csv')
dat[, id := 1:nrow(dat)]
mdat <- melt(dat, id.vars = c('id'), measure.vars=c('rawinput', 'ptb'),
variable.name='source_type', value.name='time')
mdat[, delta := time - shift(time), by = source_type]
mdat[, press_type := rep(c('press', 'release'), nrow(mdat)/2)]
mdat[, diff_events := time - shift(time), by=c('source_type', 'press_type')] # all on same scale
#mdat <- mdat[!is.na(delta)]
#mdat[, press_type := ifelse(isTRUE(all.equal(0.15, delta, tolerance=0.05)), 'press', 'release'), by=c('id', 'source_type')]
# get first index where was press
mdat[, source_type := factor(source_type, levels=c('ptb', 'rawinput'))]
ggplot(mdat, aes(x = time, y = delta, colour=source_type)) +
geom_line(size=1, alpha=0.8) +
facet_wrap(~press_type, scales='free_y', ncol=1)
ggplot(mdat, aes(x = delta, fill=source_type)) +
geom_histogram(position='identity', alpha=0.6, bins=60) +
facet_wrap(~press_type, ncol=1, scales='free_x')
mdat[, median(delta, na.rm=TRUE), by=c('press_type', 'source_type')]
mdat[, sd(delta, na.rm=TRUE), by=c('press_type', 'source_type')]
mdat[, median(diff_events, na.rm=TRUE), by=c('press_type', 'source_type')]
mdat[, sd(diff_events, na.rm=TRUE), by=c('press_type', 'source_type')]
x <- list(1,2,3)
x
x[[2]] <- NULL
x
sd(c(1,2))/sqrt(2)
x <- c(1,2,3,NA, 4)
x
x - mean(x)
library(data.table)
x <- fread('~/actlab/hw-bench/log.txt')
head(dat)
head(x)
library(ggplot2)
plot(x$audio)
plot(x$audio, type='l')
plot(x$visual, type='l')
plot(x$visual[1:10000], type='l')
plot(x$visual[1:5000], type='l')
?spectrum
spectrum(x$visual)
X <- fft(x$visual)
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
plot.frequency.spectrum(X)
plot.frequency.spectrum(X, xlimits=c(0, 20000))
plot.frequency.spectrum(X, xlimits=c(0, 250))
plot.frequency.spectrum(X, xlimits=c(0, 400))
plot.frequency.spectrum(X, xlimits=c(0, 1200))
X <- spectrum(x$visual, log='no', plot=FALSE)
X <- spectrum(x$visual, log='no', plot=FALSE, span=10)
plot(X)
spx <- X$freq/20000
spy <- 2*X$spec
plot(spy~spx, xlab='freq', ylab='spec dens', type='l')
spx <- X$freq/(1/20000)
plot(spy~spx, xlab='freq', ylab='spec dens', type='l')
plot(spy~spx, xlab='freq', ylab='spec dens', type='l', xlim=c(0, 30))
plot(spy~spx, xlab='freq', ylab='spec dens', type='l', xlim=c(0, 300))
plot(spy~spx, xlab='freq', ylab='spec dens', type='l', xlim=c(0, 800))
plot(spy~spx, xlab='freq', ylab='spec dens', type='l', xlim=c(0, 200))
plot(spy~spx, xlab='freq', ylab='spec dens', type='l', xlim=c(0, 150))
x <- fread('~/actlab/hw-bench/log.txt')
library(data.table)
x <- fread('~/actlab/hw-bench/log.txt')
head(x)
nrow(x)
plot(x$visual, type='l')
library(signal)
install.packages('signal')
library(signal)
library(data.table)
dat <- fread('~/actlab/hw_bench/log.txt')
library(signal)
library(data.table)
dat <- fread('~/actlab/hw-bench/log.txt')
plot(dat$visual, type='l')
?filtfilt
bf <- butter(3, 1/100)
y <- filtfilt(bf, dat$visual)
plot(y, type='l')
lines(dat$visual, col='red')
f <- 3
typeof(f)
class(f)
x <- c(1,2,3)
y <- c(43,54)
c(x,y)
c(x,22)
x <- c()
x
for (i in 1:10){
x <- c(x, i)
}
x
foo = strsplit('f.o.o.', '.', fixed=TRUE)
foo
foo = strsplit('f.o.o.', '.', fixed=FALSE)
foo
strsplit('f.o.o.', '.', fixed=FALSE)
strsplit('f.o.o.', '.', fixed=TRUE)
?strsplit
strsplit('f.o.o.', '.o', fixed=TRUE)
strsplit('f.o.o.', '.o', fixed=FALSE)
library(microbenchmark)
install.packages('microbenchmark')
library(microbenchmark)
?microbenchmark
microbenchmark(print('foo'))
microbenchmark(grepl('abcd', 'snsefjklfsenklabcd', fixed=TRUE))
microbenchmark(strsplit('foo-bar', '-', fixed=TRUE))
x <- zeros(10000)
x <- rep(0, 10000)
x[5000] = 1
microbenchmark(which(x))
microbenchmark(which(x==1))
install.packages('rversions')
library(rversions)
rversions::r_versions()
library(RColorBrewer)
mycols <- colorRampPalette(brewer.al(8, 'Set2'))(37)
mycols <- colorRampPalette(brewer.pal(8, 'Set2'))(37)
mycols
mycols <- colorRampPalette(brewer.pal(8, 'Set2'))(64)
mycols
mycols <- colorRampPalette(brewer.pal(8, 'Set2'))(256)
mycols
length(unique(mycols))
x <- data.frame(f = c('a', 'b', 'c', 'a'), g = c(1,2,3,5))
x
x[, 'a' in x$f]
x[, 'a' %in% x$f]
x['a' %in% x$f,]
'a'%in%x$f
x['a' == x$f,]
x[x$f %in% c('a', 'c'),]
import stringr
library(stringr)
str_detect(c('AAA', 'BABAA', 'BAAAB'), regex('.AAA.', dotall=TRUE))
str_detect(c('-0AAA', 'BABAA', 'BAAAB'), regex('.AAA.', dotall=TRUE))
str_detect(c('-0AAA0-', 'BABAA', 'BAAAB'), regex('.AAA.', dotall=TRUE))
str_split
str_split('foo_bar', '_-')
str_split('foo_bar-', '_-')
str_split('foo_bar-', '_*')
str_split('foo_bar', '_')
strsplit('foo_bar-x', '/[\s,]+/')
strsplit('foo_bar-x', '/[\\s,]+/')
strsplit('foo_bar-x', '/[s,]+/')
strsplit('foo_bar-x', '/[,]+/')
strsplit('foo_bar-x', '/,| /')
strsplit('foo_bar-x', '/_|-/')
strsplit('foo_bar-x', '\_|-')
strsplit('foo_bar-x', '_|-')
strsplit('foo_barrrio-x', '_|-')
strsplit('foo_barrrio-x', '_|-')[[1]]
x = strsplit('foo_barrrio-x', '_|-')[[1]]
length(x)
x[nchar(x) == max(nchar(x))]
x = strsplit('foo_barrrio-x-3', '_|-')[[1]]
x
x[nchar(x) == max(nchar(x))]
x = strsplit('foo_barrrio-x-3', '-')[[1]]
x
?str_split
rev
rev('foo_barriorir_3')
gsub(".*_(.*)", "\\1", 'foo_barriorr_3')
gsub(".*_(.*)", "!\\1", 'foo_barriorr_3')
gsub("^.*_(.*)", "\\1", 'foo_barriorr_3')
gsub(".*_(.*)^", "\\1", 'foo_barriorr_3')
gsub(".*_(.*)", "\\1", 'foo_barriorr_3')
gsub("^(.*_(.*))", "\\1", 'foo_barriorr_3')
sub('[_][^_]+$', '', 'foo_barrioror_3')
sub('[_][^_]+$', '', 'foo_barrioror')
sub('[_][^_]+$', '', 'foo_barrioror_3')
sub('[_][^_]+$', '', 'foo_barrioror_3444')
intersect(c(1,2,3), c(1,3,4))
dat <- data.frame(x = c(1, 2, 2), y = (4,5,6))
dat <- data.frame(x = c(1, 2, 2), y = c(4,5,6))
dat
dat[unique(dat),]
dat[unique(dat)]
unique(dat)
as.unique(dat)
unique(dat)
duplicated(dat)
duplicated(dat$x)
rbind(dat$x, dat$x)
update.packages(ask=FALSE)
d <- data.frame(x = c(1,2,3,4,5,6))
library(dplyr)
x = 2
d %>% filter(x==x)
pchisq(10605, 9)
pchisq
pchisq(10605, 9, lower.tail = FALSE)
pchisq(6, 9)
pchisq(6, 9, lower.tail=FALSE)
pracma::gammainc(6, 9)
pracma::gammainc(6/2, 9/2)
pracma::gammainc(10605/2, 9/2)
pracma::gammainc(10/2, 9/2)
pracma::gammainc(100/2, 9/2)
pracma::gammainc(1000/2, 9/2)
pracma::gammainc(10000/2, 9/2)
library(simdjson)
install.packages('simdjson')
install.packages('rcppsimdjson')
install.packages('RcppSimdJson')
library(RcppSimdJson)
?RcppSimdJson
?fparse
foob <- '~/Downloads/'
foob <- '../Downloads/data_qpf0c3zf9w.json'
fload(foob)
rr = fload(foob)
rr
rr$trialData
rr$id
rr$numTrials
rr$probs
plot(rr$probs)
rr$rewards
rr$totalReward
rr$rewards$A
rr$trialData$rewards
rr$config
rr$config$first_visit
library(RcppSimdJson)
library(data.table)
filenames <- list.files(pattern='*.json')
dat_list <- list()
for (i in 1:length(filenames)) {
dat <- fload(filenames[i])
foob <- as.data.table(dat$trialData)
for (row in 1:nrow(foob)) {
foob[row, prob_A := probs[[1]][1]]
foob[row, prob_L := probs[[1]][2]]
foob[row, reward_A := rewards[[1]][1]]
foob[row, reward_L := rewards[[1]][2]]
}
foob[, probs:=NULL]
foob[, rewards:=NULL]
foob[, rt := time - trial_reference_time]
foob[, id := dat$id]
foob[, trial:= 1:nrow(foob)]
dat_list[[i]] <- foob
}
out <- rbindlist(dat_list)
dat
setwd("~/actlab/heroku-mab/data")
filenames <- list.files(pattern='*.json')
dat_list <- list()
for (i in 1:length(filenames)) {
dat <- fload(filenames[i])
foob <- as.data.table(dat$trialData)
for (row in 1:nrow(foob)) {
foob[row, prob_A := probs[[1]][1]]
foob[row, prob_L := probs[[1]][2]]
foob[row, reward_A := rewards[[1]][1]]
foob[row, reward_L := rewards[[1]][2]]
}
foob[, probs:=NULL]
foob[, rewards:=NULL]
foob[, rt := time - trial_reference_time]
foob[, id := dat$id]
foob[, trial:= 1:nrow(foob)]
dat_list[[i]] <- foob
}
out <- rbindlist(dat_list)
out
out[, foo:=frollmean(value=='A', 11, algo='exact', align='center'), by='id']
ggplot(out, aes(x = trial, y = prob_A)) + geom_line(aes(y = prob_A), size=1) +
geom_point(aes(x = trial, y = as.integer(value=='A'), colour=reward > 0)) +
geom_line(aes(y = foo), colour='red', width=1) +
facet_wrap(~id)
library(ggplot2)
out[, foo:=frollmean(value=='A', 11, algo='exact', align='center'), by='id']
ggplot(out, aes(x = trial, y = prob_A)) + geom_line(aes(y = prob_A), size=1) +
geom_point(aes(x = trial, y = as.integer(value=='A'), colour=reward > 0)) +
geom_line(aes(y = foo), colour='red', width=1) +
facet_wrap(~id)
out[, foo:=frollmean(value=='A', 15, algo='exact', align='center'), by='id']
ggplot(out, aes(x = trial, y = prob_A)) + geom_line(aes(y = prob_A), size=1) +
geom_point(aes(x = trial, y = as.integer(value=='A'), colour=reward > 0)) +
geom_line(aes(y = foo), colour='red', width=1) +
facet_wrap(~id)
out[, foo:=frollmean(value=='A', 21, algo='exact', align='center'), by='id']
ggplot(out, aes(x = trial, y = prob_A)) + geom_line(aes(y = prob_A), size=1) +
geom_point(aes(x = trial, y = as.integer(value=='A'), colour=reward > 0)) +
geom_line(aes(y = foo), colour='red', width=1) +
facet_wrap(~id)
out[, foo:=frollmean(value=='A',13, algo='exact', align='center'), by='id']
ggplot(out, aes(x = trial, y = prob_A)) + geom_line(aes(y = prob_A), size=1) +
geom_point(aes(x = trial, y = as.integer(value=='A'), colour=reward > 0)) +
geom_line(aes(y = foo), colour='red', width=1) +
facet_wrap(~id)
out[, foo:=frollmean(value=='A',13, algo='exact', align='right'), by='id']
ggplot(out, aes(x = trial, y = prob_A)) + geom_line(aes(y = prob_A), size=1) +
geom_point(aes(x = trial, y = as.integer(value=='A'), colour=reward > 0)) +
geom_line(aes(y = foo), colour='red', width=1) +
facet_wrap(~id)
out[, foob:=mean(value=='A'), by='trial']
out[, foob2:=frollmean(foob, 11, algo='exact', align='center')]
ggplot(out, aes(x = trial, y = foob2)) + geom_line(size=1)
ggplot(out, aes(x = trial, y = foob2)) + geom_line(size=1, color='red')
ggplot(out, aes(x = trial, y = foob2)) + geom_line(size=1, color='red') + geom_line(aes(y=prob_A))
head(out)
out[, sum(reward_A), by='id']
out[, sum(value=='A'), by='id']
out[, c('latent_reward', 'chose_a) = c(sum(reward_A), sum(value=='A')), by='id']
out[, c('latent_reward', 'chose_a) := c(sum(reward_A), sum(value=='A')), by='id']
out[, c('latent_reward', 'chose_a) := list(sum(reward_A), sum(value=='A')), by='id']
out[, list(sum(reward_A), sum(value=='A')), by='id']
out[, list(latent_reward=sum(reward_A), number_times_chose_a = sum(value=='A')), by='id']
ggplot(out, aes(x = rt, fill=type)) + geom_histogram(position='identity', alpha=0.5)
ggplot(out, aes(x = rt, fill=type)) + geom_histogram(position='identity', alpha=0.5) + xlim(c(0, 800))
ggplot(out, aes(x = rt, fill=type)) + geom_histogram(position='identity', alpha=0.5, bins=60) + xlim(c(0, 800))
out[, type, by='id']
out[, sum(type=='mouse'), by='id']
out[, sum(type=='pointer'), by='id']
out[, sum(type=='touch'), by='id']
out[, sum(type=='keyboard'), by='id']
head(out[id=='5f2de85a6a3798144d095ae8'])
tail(out[id=='5f2de85a6a3798144d095ae8'])
out[id=='5f2de85a6a3798144d095ae8' && type=='keyboard']
out[id=='5f2de85a6a3798144d095ae8' & type=='keyboard']
install.packages('pals')
library(pals)
discoveries
?pals
browseVignettes(package="pals")
stepped()
